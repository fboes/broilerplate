// Will output the enclosed styles in a media query matching the settings in your `_base.scss`. You may want to change these to match your responsive strategy, be it "mobile-first", "desktop-first", "each their own", "mobile separate" or anything in between.
// See http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32 and http://davidwalsh.name/write-media-queries-sass for more information.
// Use like `@include screen_mobile {â€¦}`
@mixin screen_mobile() {
  @media #{$media-responsive-mobile--bigger} {
    @content;
  }
}

@mixin screen_tablet() {
  @media #{$media-responsive-tablet--bigger} {
    @content;
  }
}

@mixin screen_tablet_landscape() {
  @media #{$media-responsive-tablet-landscape--bigger} {
    @content;
  }
}

@mixin screen_desktop() {
  @media #{$media-responsive-desktop--bigger} {
    @content;
  }
}

// Styles for devices with a high DPI ratio, aka retina devices.
@mixin screen_retina() {
  @media (min-resolution: 1.3dppx) {
    @content;
  }
}

// Add rules for RTL pages
// @see https://developer.mozilla.org/en-US/docs/Web/CSS/:dir
@mixin rtl() {
  [dir="rtl"] & {
    @content;
  }
}

// Add rules for LTR pages
// @see https://developer.mozilla.org/en-US/docs/Web/CSS/:dir
@mixin ltr() {
  [dir="ltr"] & {
    @content;
  }
}

// Only output this block in AMP pages.
@mixin amp() {
  @if($switch-amp) {
    @content;
  }
}

// Only output this block in non-AMP pages.
@mixin no-amp() {
  @if(not($switch-amp)) {
    @content;
  }
}

// This will compute any pixel value to a rem value, according to $base-unit you set in `_base.scss`
// $value-px - (unit) A size given in pixels. This will be converted to rem, according to your `base-unit` set in `_base.scss`
@function rem($value-px) {
  @return toolshed-rem($value-px, $base-unit);
}

// Prevent iPad & co from having to double click items with :hover state
// Styleguide 3.1.8
@mixin hover {
  &:hover,
  &:active {
    @content;
  }
}
