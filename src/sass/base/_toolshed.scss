// -----------------------------------------------
// BASICS
// -----------------------------------------------

// build webfont source. Remember that the filename of the font must be short than 31 characters, else it will not work in IE8 and lower.
// See http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/
//
// $base - (string)
// $id   - (string)
@mixin toolshed-webfont-src($base, $id) {
  @if (str-length($id) > 31) {
    @error 'ID of webfont to long for IE, consider using a smaller webfont filename';
  }
  src: url("#{$base}.eot?#iefix") format("embedded-opentype"),
    url("#{$base}.woff") format("woff"), url("#{$base}.ttf") format("truetype"),
    url("#{$base}.svg##{$id}") format("svg");
}

// hide text from current element
@mixin toolshed-hide-text() {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
  display: inline-block;
  color: transparent !important;
}

// hide entire element
@mixin toolshed-visuallyhidden() {
  position: absolute;
  width: 1px; // Setting this to 0 make it invisible for VoiceOver
  height: 1px; // Setting this to 0 make it invisible for VoiceOver
  padding: 0;
  margin: -1px;
  border: 0;
  clip: rect(0 0 0 0);
  overflow: hidden;
}

// clear floats; see also http://cssmojo.com/the-very-latest-clearfix-reloaded/
@mixin toolshed-clearfix() {
  zoom: 1;
  &:after {
    display: block;
    visibility: hidden;
    height: 0;
    clear: both;
    content: " ";
  }
}

// convert current element to horizontal list
//
// $useFloat - (bool) Will remove whitespaces between list elements like `</li><li>`
@mixin toolshed-horizontal-list($useFloat: false) {
  display: block;
  list-style: none;
  @if $useFloat {
    @include toolshed-clearfix();
  } @else {
    text-align: center;
  }
  li {
    display: inline-block;
    margin: 0;
    padding: 0;
    @if $useFloat {
      float: left;
    } @else {
      vertical-align: top;
    }
  }
}

@mixin toolshed-table-fixed {
  table-layout: fixed;
  width: 100%;
  white-space: nowrap;
  td,
  th {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

// $useFlex - (bool) If you want to use flex-boxes instead of `position:absolute`
@mixin toolshed-vertical-center($useFlex: true) {
  @if ($useFlex) {
    display: flex;
    flex-direction: column;
    justify-content: center;
  } @else {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }
}

// -----------------------------------------------
// BACKGROUND IMAGES & SPRITES
// -----------------------------------------------

// on retina, use image that's scaled by 2
@mixin toolshed-background-retina(
  $imageUrl,
  $retinaImageUrl,
  $imageWidth,
  $imageHeight
) {
  background-image: url($imageUrl);
  background-size: $imageWidth $imageHeight;
  @media (min-resolution: 1.3dppx) {
    background-image: url($retinaImageUrl);
  }
}

// This mixin allows you to get a specific icon from a grid-sprite.
// Combine this mixing with @mixin background-retina to a new mixing for your sprite
//
// $imageUrl       - (string)
// $retinaImageUrl - (string)
// $imageWidth     - (unit)    The dimension of the non-retina image
// $imageHeight    - (unit)    The dimension of the non-retina image
// $xGrid          - (unit)    The x-spacing from the center of each icon to the next, e.g. "20px"
// $yGrid          - (unit)    The y-spacing from the center of each icon to the next, e.g. "20px"
// $iconWidth      - (unit)    The width of this icon in px
// $iconHeight     - (unit)    The height of this icon in px
// $xOffset        - (integer) The x-position of the icon on this grid
// $yOffset        - (integer) The y-position of the icon on this grid
// $mode           - (integer) with 0 => all css, 1 => all css without bg-image, 2 => only background-position, 3 => only size
@mixin toolshed-grid-sprite-complete(
  $imageUrl,
  $retinaImageUrl,
  $imageWidth,
  $imageHeight,
  $xGrid,
  $yGrid,
  $iconWidth,
  $iconHeight: $iconWidth,
  $xOffset: 0,
  $yOffset: 0,
  $mode: 0
) {
  @if ($mode == 3) {
    width: ceil($iconWidth);
    height: ceil($iconHeight);
  } @else {
    @if ($mode == 0) {
      @include toolshed-background-retina(
        $imageUrl,
        $retinaImageUrl,
        $imageWidth,
        $imageHeight
      );
    }
    @include toolshed-grid-sprite(
      $xGrid,
      $yGrid,
      $xOffset,
      $yOffset,
      $iconWidth,
      $iconHeight,
      ($mode == 2)
    );
  }
}

// generating sprite stuff without bg-image
@mixin toolshed-grid-sprite(
  $xGrid,
  $yGrid,
  $xOffset: 0,
  $yOffset: 0,
  $iconWidth: 20px,
  $iconHeight: $iconWidth,
  $compact: false
) {
  @if $compact {
  } @else {
    @include toolshed-grid-sprite-stuff($iconWidth, $iconHeight);
  }
  @include toolshed-grid-sprite-position(
    $xGrid,
    $yGrid,
    $xOffset,
    $yOffset,
    $iconWidth,
    $iconHeight
  );
}

// generating sprite stuff like dimensions etc, but without position
@mixin toolshed-grid-sprite-stuff($iconWidth: 20px, $iconHeight: $iconWidth) {
  background-repeat: no-repeat;
  display: inline-block;
  width: ceil($iconWidth);
  height: ceil($iconHeight);
  content: " ";
}

// generating sprite background-position
@mixin toolshed-grid-sprite-position(
  $xGrid,
  $yGrid,
  $xOffset: 0,
  $yOffset: 0,
  $iconWidth: 20px,
  $iconHeight: $iconWidth
) {
  background-position: floor(-1 * $xGrid * ($xOffset + 0.5) + ($iconWidth / 2))
    floor(-1 * $yGrid * ($yOffset + 0.5) + ($iconHeight / 2));
}

// Load a single webfont icon. This works best in :before
//
// $fontfamily  : (string) Name of fontfamily used for icon font
// $content     : (string) Character to display. Will be something like `\e601`
// $fontsize    : (unit) Size of character. Defaults to `1em`. Beware of using `rem` as IE9-10 will not glob this.
// $onlyContent : (bool) Only output the caracter. Defaults to `false`
@mixin toolshed-font-icon(
  $fontfamily,
  $content,
  $fontsize: 1em,
  $onlyContent: false
) {
  @if ($onlyContent) {
  } @else {
    display: inline-block;
    font: normal normal #{$fontsize}/ 1 $fontfamily;
  }
  content: $content;
}

// -----------------------------------------------
// CALCULATIONS
// -----------------------------------------------

// Convert pixels to rem
@function toolshed-rem($value-px, $base-px, $relative: 0) {
  @return #{($value-px / $base-px) + $relative}rem;
}

// round with precision of 3
//
// $val - (unit) Any unit you want be rounded to the last three decimals
@function toolshed-round($val) {
  @return round($val * 1000) / 1000;
}
